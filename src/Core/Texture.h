#ifndef TEXTURE_H
#define TEXTURE_H

#include <string>
#include <SDL.h>
#include <GL\glew.h>
#include <gl\GLU.h>

/*
-Base Class-
*/
class Texture
{
public:
	
	Texture();
	Texture(std::string &filePath);
	Texture(SDL_Surface* surface);
	~Texture();

	// Loads an image with SDL_Image then, binds it to a texture with OpenGL. Calling this again will replace the previous texture
	bool LoadTexture(std::string &filePath);

	// Bind a pre-existing surface to a texture with OpenGL
	bool LoadTexture(SDL_Surface* surface, bool freeSurfaceAfterLoad = false);

	// Deletes the loaded texture using glDeleteTextures, and sets the texture handle to 0
	void DeleteTexture();

	// Get the texture handle generated by OpenGL for this texture
	unsigned int GetTextureID();

	// Get the file name or path used for loading this image
	std::string GetFileName();

	// Get the width of the loaded image
	unsigned int GetWidth();

	// Get the height of the loaded image
	unsigned int GetHeight();


private:

	// The Texture handle that is generated by OpenGL
	unsigned int m_TextureID;

	// The file path used to load the image
	std::string m_FileName;

	// The width of the image that is loaded
	unsigned int m_Width;

	// The height of the image that is loaded
	unsigned int m_Height;

	// Get the colour format used by a surface, such as RGBA, BGR, etc.
	GLenum GetSurfaceColourFormat(SDL_Surface* surface);

};


#endif TEXTURE_H